services:
#  file-service:
#    build:
#      context: ./file-service
#    environment:
#      NODE_ENV: production
#    container_name: file-service
#    ports:
#      - "4000:4000"
#    networks:
#      - file_network
#    depends_on:
#      mongo-file:
#        condition: service_healthy
#      redis-common:
#        condition: service_healthy
#      rabbitmq:
#        condition: service_healthy

  user-service:
    build:
      context: ./user-service
    environment:
      NODE_ENV: production
    container_name: user-service
    ports:
      - "2000:2000"
    networks:
      - user_network
    depends_on:
      postgres:
        condition: service_healthy
      redis-common:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

#  auth-service:
#    build:
#      context: ./auth-service
#    environment:
#      NODE_ENV: production
#    container_name: auth-service
#    ports:
#      - "3000:3000"
#    networks:
#      - auth_network
#    depends_on:
#      postgres:
#        condition: service_healthy
#      redis-auth:
#        condition: service_healthy
#      redis-common:
#        condition: service_healthy
#      rabbitmq:
#        condition: service_started

  postgres:
    image: postgres
    restart: always
    user: postgres
    container_name: postgres-service
    env_file:
      - .env
    ports:
      - "5432:5432"
    command: postgres -c 'max_connections=500' -c 'idle_in_transaction_session_timeout=20000' -c 'statement_timeout=20000'
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_MULTIPLE_DATABASES=auth-dev,auth-test,user,user-dev,user-test
    volumes:
      - postgres:/var/lib/postgresql/data/:rw
      - ./entrypoint.sh:/docker-entrypoint-initdb.d/entrypoint.sh
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - auth_network
      - user_network

  mongo-file:
    image: mongo:7.0
    command: [ "--replSet", "rs0", "--bind_ip_all", "--port", "27017" ]
    container_name: mongo-file
    ports:
      - "27017:27017"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    volumes:
      - mongo_data:/data/db
      - mongo_data:/data/configdb
    networks:
      - file_network

  minio:
    image: "minio/minio"
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    command: minio server /data --console-address ":9001"
    container_name: minio-file
    env_file:
      - .env
    volumes:
      - minio:/data
    environment:
      - MINIO_ROOT_USER=${FILE_MINIO_USER}
      - MINIO_ROOT_PASSWORD=${FILE_MINIO_PASSWORD}
    networks:
      - file_network

  redis-auth:
    image: redis/redis-stack:latest
    restart: always
    environment:
      REDIS_ARGS: "--requirepass ${REDIS_AUTH_PASS}"
    container_name: redis-auth
    ports:
      - "6379:6379"
      - "8001:8001"
    volumes:
      - redis_auth:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - auth_network

  redis-common:
    image: redis/redis-stack:latest
    restart: always
    container_name: redis-common
    environment:
      REDIS_ARGS: "--requirepass ${REDIS_COMMON_PASS}"
    ports:
      - "6380:6379"
      - "8002:8001"
    volumes:
      - redis_common:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - file_network
      - auth_network
      - user_network

  rabbitmq:
    image: rabbitmq:latest
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file:
      - .env
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rabbit_data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmq-plugins", "list" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - file_network
      - auth_network
      - user_network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4_container
    restart: always
    env_file:
      - .env
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin:/var/lib/pgadmin
    networks:
      - auth_network
      - user_network

  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    restart: always
    ports:
      - "9003:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer:/data
    networks:
      - auth_network
      - user_network
      - file_network

volumes:
  portainer:
  pgadmin:
  postgres:
  mongo_data:
  rabbit_data:
  minio:
  redis_auth:
  redis_common:

networks:
  file_network:
    driver: bridge
  auth_network:
    driver: bridge
  user_network:
    driver: bridge


