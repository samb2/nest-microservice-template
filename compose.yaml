services:
  #  file-service:
  #    build:
  #      context: ./file-service
  #    environment:
  #      NODE_ENV: production
  #    container_name: file-service
  #    ports:
  #      - "4000:4000"
  #    networks:
  #      - file_service
  #    depends_on:
  #      mongo-file:
  #        condition: service_healthy
  #      redis-common:
  #        condition: service_started
  #      rabbitmq:
  #        condition: service_started
  #
  #  user-service:
  #    build:
  #      context: ./user-service
  #    environment:
  #      NODE_ENV: production
  #    container_name: user-service
  #    ports:
  #      - "2000:2000"
  #    networks:
  #      - user_service
  #    depends_on:
  #      postgres:
  #        condition: service_healthy
  #      redis-common:
  #        condition: service_started
  #      rabbitmq:
  #        condition: service_started
  #
  #  auth-service:
  #    build:
  #      context: ./auth-service
  #    environment:
  #      NODE_ENV: production
  #    container_name: auth-service
  #    ports:
  #      - "3000:3000"
  #    networks:
  #      - auth_service
  #    depends_on:
  #      postgres:
  #        condition: service_healthy
  #      redis-auth:
  #        condition: service_started
  #      redis-common:
  #        condition: service_started
  #      rabbitmq:
  #        condition: service_started

  postgres:
    image: postgres
    restart: always
    user: postgres
    container_name: postgres-service
    env_file:
      - .env
    ports:
      - "5432:5432"
    command: postgres -c 'max_connections=500' -c 'idle_in_transaction_session_timeout=20000' -c 'statement_timeout=20000'
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres:/var/lib/postgresql/data/:rw
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - auth_service
      - user_service

  mongo-file:
    image: mongo
    hostname: mongo
    restart: always
    container_name: mongo-file
    ports:
      - "27017:27017"
    networks:
      - file_service
    volumes:
      - mongo-file:/data/db
    command: [ "--bind_ip", "0.0.0.0" ]
    healthcheck:
      test: echo 'db.runCommand("ping").ok' mongo localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 5

  minio:
    image: "minio/minio"
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    command: minio server /data --console-address ":9001"
    container_name: minio-file
    env_file:
      - .env
    volumes:
      - minio:/data
    environment:
      - MINIO_ROOT_USER=${FILE_MINIO_USER}
      - MINIO_ROOT_PASSWORD=${FILE_MINIO_PASSWORD}
    networks:
      - file_service

  redis-auth:
    image: redis/redis-stack:latest
    restart: always
    container_name: redis-auth
    ports:
      - "6379:6379"
      - "8001:8001"
    volumes:
      - redis-auth:/data
    networks:
      - auth_service

  redis-common:
    image: redis/redis-stack:latest
    restart: always
    container_name: redis-common
    ports:
      - "6380:6379"
      - "8002:8001"
    volumes:
      - redis-common:/data
    networks:
      - file_service
      - auth_service
      - user_service

  rabbitmq:
    image: rabbitmq:latest
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file:
      - .env
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rabbit_data:/var/lib/rabbitmq
    networks:
      - file_service
      - auth_service
      - user_service

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4_container
    restart: always
    env_file:
      - .env
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin:/var/lib/pgadmin
    networks:
      - auth_service
      - user_service

  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    restart: always
    ports:
      - "9003:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer:/data
    networks:
      - auth_service
      - user_service
      - file_service

volumes:
  portainer:
  pgadmin:
  postgres:
  mongo-file:
  rabbit_data:
  minio:
  redis-auth:
  redis-common:

networks:
  file_service:
    driver: bridge
  auth_service:
    driver: bridge
  user_service:
    driver: bridge


